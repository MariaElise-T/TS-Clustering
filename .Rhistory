geom_boxplot()
ggplot(data=scalability_results, aes(x=as.factor(input_size), y=runtime))+
geom_boxplot()+
xlab("input size - matrix dimension")+
ggtitle("matvec scalability experiment using gettimeofday()")
scalability_results_agg <- aggregate(scalability_results, by=list(scalability_results$input_size), FUN="mean")
View(scalability_results_agg)
ggplot(data=scalability_results_agg, aes(x=as.factor(input_size), y=runtime))+
geom_point()
ggplot(data=scalability_results_agg, aes(x=as.factor(input_size), y=runtime))+
geom_point()+
xlab("input size - matrix dimension")+
ggtitle("matvec scalability experiment using gettimeofday()")+
geom_smooth(method='lm', formula= y~x)
ggplot(data=scalability_results_agg, aes(x=input_size, y=runtime))+
geom_point()+
xlab("input size - matrix dimension")+
ggtitle("matvec scalability experiment using gettimeofday()")+
geom_smooth(method='lm', formula= runtime~input_size)
ggplot(data=scalability_results_agg, aes(x=input_size, y=runtime))+
geom_point()+
xlab("input size - matrix dimension")+
ggtitle("matvec scalability experiment using gettimeofday()")+
geom_smooth(method='lm', formula=scalability_results_agg$runtime~scalability_results_agg$input_size)
ggplot(data=scalability_results_agg, aes(x=input_size, y=runtime))+
geom_point()+
xlab("input size - matrix dimension")+
ggtitle("matvec scalability experiment using gettimeofday()")+
geom_smooth(method='lm', formula=runtime~input_size)
attach(scalability_results_agg)
ggplot(data=scalability_results_agg, aes(x=input_size, y=runtime))+
geom_point()+
xlab("input size - matrix dimension")+
ggtitle("matvec scalability experiment using gettimeofday()")+
geom_smooth(method='lm', formula=runtime~input_size)
ggplot(data=scalability_results_agg, aes(x=input_size, y=runtime))+
geom_point()+
xlab("input size - matrix dimension")+
ggtitle("matvec scalability experiment using gettimeofday()")+
geom_smooth(method='lm')
ggplot(data=scalability_results_agg, aes(x=input_size, y=runtime))+
geom_point()+
xlab("input size - matrix dimension")+
ggtitle("matvec scalability experiment using gettimeofday()")+
geom_smooth(method='lm', se = FALSE)
perf_results <- read_excel("Desktop/HPC_HW0_exp_results.xlsx", sheet = "perf_results")
colnames(perf_results) <- c("output")
perf_results$flag <- c(rep("O0", 179), rep("O1", 179), rep("O2", 179), rep("O3", 179))
perf_results <- read_excel("Desktop/HPC_HW0_exp_results.xlsx", sheet = "perf_results")
colnames(perf_results) <- c("output")
perf_results$flag <- c(rep("O0", 179), rep("O1", 179), rep("O2", 179), rep("O3", 179))
View(perf_results)
perf_results_timing <- perf_results[grep("seconds time elapsed", perf_results$output),]
perf_results_timing$output <- str_remove(perf_results_timing$output, "seconds time elapsed")
View(perf_results_timing)
perf_results_cycles <- perf_results[grep(" cycles ", perf_results$output),]
perf_results_cycles_fe <- perf_results_cycles[grep("frontend", perf_results_cycles$output),]
View(perf_results_cycles_fe)
perf_results_cycles_fe
gsub(".*[#]([^.]+)[%].*", "\\1", "#    0.02%")
a = gsub(".*[#]([^.]+)[%].*", "\\1", "#    0.02%")
a = gsub(".*[#]([^.]+)[%].*", "\\1", "aaa#    0.02%bbb")
a = gsub(".*[#]([^.]+)[%].*", "\\1", "aaa#    0.02%bbb")
library(qdap)
install.packages(qdap)
install.packages("qdap")
genXtract(perf_results_cycles_fe$output, "#", "%")
library(qdap)
genXtract(perf_results_cycles_fe$output, "#", "%")
View(perf_results_cycles)
perf_results_cycles_fe <- perf_results[grep("frontend", perf_results$output),]
View(perf_results_cycles_fe)
View(perf_results_cycles_fe)
perf_results_cycles_fe$clean_output <- genXtract(perf_results_cycles_fe$output, "#", "%")
View(perf_results_cycles_fe)
perf_results_cycles_fe$clean_output <- as.numeric(genXtract(perf_results_cycles_fe$output, "#", "%"))
View(perf_results_cycles_fe)
perf_results_cycles_fe$clean_output <- as.numeric(genXtract(perf_results_cycles_fe$output, "#", "%"))
perf_results_cycles_fe$clean_output <- genXtract(perf_results_cycles_fe$output, "#", "%")
perf_results_cycles_fe$clean_output <- as.numeric(perf_results_cycles_fe$clean_output)
View(perf_results_cycles_fe)
perf_results_cycles_fe$clean_output <- genXtract(perf_results_cycles_fe$output, "#", "%")
perf_results_cycles_fe$clean_output
perf_results_cycles_fe$clean_output <- unlist(genXtract(perf_results_cycles_fe$output, "#", "%"))
perf_results_cycles_fe$clean_output
a = genXtract(perf_results_cycles_fe$output, "#", "%")
View(a)
View(a)
perf_results_cycles_fe$clean_output <- unlist(genXtract(perf_results_cycles_fe$output, "#", "%"), use.names=FALSE)
perf_results_cycles_fe
perf_results_cycles_fe$clean_output
perf_results <- read_excel("Desktop/HPC_HW0_exp_results.xlsx", sheet = "perf_results")
colnames(perf_results) <- c("output")
perf_results$flag <- c(rep("O0", 179), rep("O1", 179), rep("O2", 179), rep("O3", 179))
View(perf_results)
perf_results_cycles_bm <- perf_results[grep("branch-misses", perf_results$output),]
perf_results_cycles_bm$clean_output <- unlist(genXtract(perf_results_cycles_bm$output, "#", "%"), use.names=FALSE)
perf_results_cycles_bm$clean_output <- as.numeric(perf_results_cycles_bm$clean_output)
perf_results_bm <- perf_results[grep("branch-misses", perf_results$output),]
perf_results_bm$clean_output <- unlist(genXtract(perf_results_bm$output, "#", "%"), use.names=FALSE)
perf_results_bm$clean_output <- as.numeric(perf_results_bm$clean_output)
View(perf_results_bm)
genXtract(perf_results_bm$output, "#", "%")
perf_results_bm$clean_output <- unlist(genXtract(perf_results_bm$output, "#", "%"), use.names=FALSE)
View(perf_results_bm)
perf_results_bm$clean_output
perf_results_bm$clean_output <- as.numeric(perf_results_bm$clean_output)
View(perf_results_bm)
perf_results_cycles_fe <- perf_results[grep("frontend", perf_results$output),]
perf_results_cycles_be <- perf_results[grep("backend", perf_results$output),]
perf_results_cycles_fe$clean_output <- unlist(genXtract(perf_results_cycles_fe$output, "#", "%"), use.names=FALSE)
perf_results_cycles_fe$clean_output <- as.numeric(perf_results_cycles_fe$clean_output)
perf_results_cycles_be$clean_output <- unlist(genXtract(perf_results_cycles_be$output, "#", "%"), use.names=FALSE)
perf_results_cycles_be$clean_output <- as.numeric(perf_results_cycles_be$clean_output)
View(perf_results_cycles_be)
View(perf_results_cycles_bm)
View(perf_results_cycles_fe)
View(perf_results_cycles)
View(perf_results_timing)
View(perf_results_timing)
perf_results_cycles_fe$clean_output <- unlist(genXtract(perf_results_cycles_fe$output, "#", "%"), use.names=FALSE)
perf_results_cycles_fe$clean_output <- numeric(perf_results_cycles_fe$clean_output)
perf_results_cycles_fe$clean_output <- as.numeric(perf_results_cycles_fe$clean_output)
perf_results_cycles_fe$clean_output <- unlist(genXtract(perf_results_cycles_fe$output, "#", "%"), use.names=FALSE)
View(perf_results_cycles_be)
View(perf_results_cycles_bm)
View(perf_results_cycles_fe)
View(perf_results)
perf_results_cpu_migration <- perf_results[grep("cpu-migrations", perf_results$output),]
perf_results_cpu_migration$clean_output <- unlist(genXtract(perf_results_cpu_migration$output, "#", "%"), use.names=FALSE)
perf_results_cpu_migration <- perf_results[grep("cpu-migrations", perf_results$output),]
View(perf_results_cpu_migration)
perf_results_cpu_migration$clean_output <- unlist(genXtract(perf_results_cpu_migration$output, "#", "%"), use.names=FALSE)
genXtract(perf_results_cpu_migration$output, "#", "%")
View(perf_results_cpu_migration)
perf_results_pf$clean_output <- unlist(genXtract(perf_results_pf$output, "#", "%"), use.names=FALSE)
perf_results_pf <- perf_results[grep("page-faults", perf_results$output),]
perf_results_pf$clean_output <- unlist(genXtract(perf_results_pf$output, "#", "%"), use.names=FALSE)
View(perf_results)
perf_results_bm <- perf_results[grep("branch-misses", perf_results$output),]
perf_results_cycles_fe <- perf_results[grep("frontend", perf_results$output),]
perf_results_cycles_fe$clean_output <- unlist(genXtract(perf_results_cycles_fe$output, "#", "%"), use.names=FALSE)
perf_results_bm <- perf_results[grep("branch-misses", perf_results$output),]
perf_results_bm$clean_output <- unlist(genXtract(perf_results_bm$output, "#", "%"), use.names=FALSE)
View(perf_results_bm)
perf_results_bm <- perf_results[grep("branch-misses", perf_results$output),]
View(perf_results_bm)
perf_results_bm$clean_output <- unlist(genXtract(perf_results_bm$output, "#", "%"), use.names=FALSE)
perf_results_bm$clean_output <- as.numeric(perf_results_bm$clean_output)
perf_results_pf <- perf_results[grep("page-faults", perf_results$output),]
perf_results_pf$clean_output <- unlist(genXtract(perf_results_pf$output, "#", "%"), use.names=FALSE)
View(perf_results_pf)
perf_results_pf$clean_output <- unlist(genXtract(perf_results_pf$output, "#", "K/sec"), use.names=FALSE)
View(perf_results_pf)
perf_results_pf$clean_output <- as.numeric(str_trim(perf_results_pf$clean_output))
View(perf_results_pf)
fe_means <- aggregate(perf_results_cycles_fe, by="flag", FUN="mean")
fe_means <- aggregate(perf_results_cycles_fe$clean_output, by=list(perf_results_cycles_fe$flag), FUN="mean")
perf_results_cycles_fe <- perf_results[grep("frontend", perf_results$output),]
perf_results_cycles_be <- perf_results[grep("backend", perf_results$output),]
perf_results_cycles_fe$clean_output <- unlist(genXtract(perf_results_cycles_fe$output, "#", "%"), use.names=FALSE)
perf_results_cycles_fe$clean_output <- as.numeric(str_trim(perf_results_cycles_fe$clean_output))
perf_results_cycles_fe$clean_output
fe_means <- aggregate(perf_results_cycles_fe$clean_output, by=list(flag), FUN="mean")
fe_means <- aggregate(data=perf_results_cycles_fe, clean_output~flag, FUN="mean")
View(fe_means)
perf_results_cycles_be$clean_output <- unlist(genXtract(perf_results_cycles_be$output, "#", "%"), use.names=FALSE)
perf_results_cycles_be$clean_output <- as.numeric(str_trim(perf_results_cycles_be$clean_output))
be_means <- aggregate(data=perf_results_cycles_be, clean_output~flag, FUN="mean")
View(be_means)
perf_results_bm <- perf_results[grep("branch-misses", perf_results$output),]
perf_results_bm$clean_output <- unlist(genXtract(perf_results_bm$output, "#", "%"), use.names=FALSE)
perf_results_bm$clean_output <- as.numeric(str_trim(perf_results_bm$clean_output))
bm_means <- aggregate(data=perf_results_cycles_bm, clean_output~flag, FUN="mean")
View(perf_results_bm)
bm_means <- aggregate(data=perf_results_bm, clean_output~flag, FUN="mean")
View(bm_means)
perf_results_pf <- perf_results[grep("page-faults", perf_results$output),]
perf_results_pf$clean_output <- unlist(genXtract(perf_results_pf$output, "#", "K/sec"), use.names=FALSE)
perf_results_pf$clean_output <- as.numeric(str_trim(perf_results_pf$clean_output))
pf_means <- aggregate(data=perf_results_pf, clean_output~flag, FUN="mean")
View(pf_means)
View(perf_results_cpu_migration)
perf_results_timing <- perf_results[grep("seconds time elapsed", perf_results$output),]
perf_results_timing$output <- str_remove(perf_results_timing$output, "seconds time elapsed")
View(perf_results_timing)
perf_results_timing$output
perf_results_timing$output <- as.numeric(str_trim(str_remove(perf_results_timing$output, "seconds time elapsed")))
perf_results_timing$output
timing_means <- aggregate(data=perf_results_timing, clean_output~flag, FUN="mean")
perf_results_timing <- perf_results[grep("seconds time elapsed", perf_results$output),]
perf_results_timing$output <- as.numeric(str_trim(str_remove(perf_results_timing$output, "seconds time elapsed")))
timing_means <- aggregate(data=perf_results_timing, output~flag, FUN="mean")
View(timing_means)
perf_results2 <- read_excel("Desktop/HPC_HW0_exp_results.xlsx", sheet = "perf_results_2")
colnames(perf_results2) <- c("output")
perf_results2$flag <- c(rep("O0", 179), rep("O1", 179), rep("O2", 179), rep("O3", 179))
View(perf_results2)
perf_results <- read_excel("Desktop/HPC_HW0_exp_results.xlsx", sheet = "perf_results")
perf_results2$flag <- c(rep("O0", 131), rep("O1", 131), rep("O2", 132), rep("O3", 132))
perf_results2 <- read_excel("Desktop/HPC_HW0_exp_results.xlsx", sheet = "perf_results_2")
colnames(perf_results2) <- c("output")
perf_results2$flag <- c(rep("O0", 131), rep("O1", 130), rep("O2", 131), rep("O3", 126))
View(perf_results2)
perf_results2$flag <- c(rep("O0", 131), rep("O1", 130), rep("O2", 130), rep("O3", 127))
perf_results_cm <- perf_results2[grep("cache-misses", perf_results2$output),]
perf_results_cm$clean_output <- unlist(genXtract(perf_results_cm$output, "#", "K/sec"), use.names=FALSE)
perf_results_cm$clean_output <- as.numeric(str_trim(perf_results_cm$clean_output))
pf_means <- aggregate(data=perf_results_cm, clean_output~flag, FUN="mean")
perf_results_cm <- perf_results2[grep("cache-misses", perf_results2$output),]
perf_results_cm$clean_output <- unlist(genXtract(perf_results_cm$output, "#", "%"), use.names=FALSE)
perf_results_cm$clean_output <- as.numeric(str_trim(perf_results_cm$clean_output))
pf_means <- aggregate(data=perf_results_cm, clean_output~flag, FUN="mean")
View(pf_means)
perf_results_cm <- perf_results2[grep("cache-misses", perf_results2$output),]
perf_results_cm$clean_output <- unlist(genXtract(perf_results_cm$output, "#", "%"), use.names=FALSE)
perf_results_cm$clean_output <- as.numeric(str_trim(perf_results_cm$clean_output))
cm_means <- aggregate(data=perf_results_cm, clean_output~flag, FUN="mean")
View(cm_means)
LLC load misses
perf_results_cm <- perf_results2[grep("LLC-load-misses", perf_results2$output),]
perf_results_cm$clean_output <- unlist(genXtract(perf_results_cm$output, "#", "%"), use.names=FALSE)
perf_results_cm$clean_output <- as.numeric(str_trim(perf_results_cm$clean_output))
cm_means <- aggregate(data=perf_results_cm, clean_output~flag, FUN="mean")
View(cm_means)
row_order_mat <- matrix(unlist(row_order))
library(combinat)
library(gtools)
# Each tattoo can be ranked 4!=24 ways
possible_ranks <- permn(c(1,2,3,4))
# The overall rankings can be assigned 24*24*24*24=331776 ways
row_order = permutations(n=24, r=4, v=1:24, repeats.allowed=T)
# There are 331776 possible score cards.  Assuming column 1 is Angel,
# column 2 is DJ, column 3 is CJ, and column 4 is Gian, we only want the ones
# where the sum of CJ is greatest and sum of Gian is second greatest
CJ_1st_Gian_2nd = c(rep(F, 331776))
for(i in 1:331776){
score_card = rbind(possible_ranks[[row_order[i,1]]], possible_ranks[[row_order[i,2]]], possible_ranks[[row_order[i,3]]], possible_ranks[[row_order[i,4]]])
colRanks <- colSums(score_card)
if(((colRanks[3] > colRanks[4]) & (colRanks[4] > colRanks[2]) & (colRanks[2] > colRanks[1])) || ((colRanks[3] > colRanks[4]) & (colRanks[4] > colRanks[1]) & (colRanks[1] > colRanks[2]))){
CJ_1st_Gian_2nd[i] = T
}
}
row_order_mat <- matrix(unlist(row_order))
library(combinat)
library(gtools)
# Each tattoo can be ranked 4!=24 ways
possible_ranks <- permn(c(1,2,3,4))
# The overall rankings can be assigned 24*24*24*24=331776 ways
row_order = permutations(n=24, r=4, v=1:24, repeats.allowed=T)
# There are 331776 possible score cards.  Assuming column 1 is Angel,
# column 2 is DJ, column 3 is CJ, and column 4 is Gian, we only want the ones
# where the sum of CJ is greatest and sum of Gian is second greatest
CJ_1st_Gian_2nd = c(rep(F, 331776))
for(i in 1:331776){
score_card = rbind(possible_ranks[[row_order[i,1]]], possible_ranks[[row_order[i,2]]], possible_ranks[[row_order[i,3]]], possible_ranks[[row_order[i,4]]])
colRanks <- colSums(score_card)
if(((colRanks[3] > colRanks[4]) & (colRanks[4] > colRanks[2]) & (colRanks[2] > colRanks[1])) || ((colRanks[3] > colRanks[4]) & (colRanks[4] > colRanks[1]) & (colRanks[1] > colRanks[2]))){
CJ_1st_Gian_2nd[i] = T
}
}
row_order_df <- as.data.frame(row_order)
View(row_order_df)
row_order_df$top_two <- CJ_1st_Gian_2nd
View(row_order_df)
row_order_fromshow <- row_order_df[which(row_order_df$top_two==T),]
View(row_order_fromshow)
angel_wins <- 0
for(i in 1:13542){
score_card = rbind(possible_ranks[row_order_fromshow[i,1]], possible_ranks[row_order_fromshow[i,2]], possible_ranks[row_order_fromshow[i,3]], possible_ranks[row_order_fromshow[i,4]])
colRanks <- colSums(score_card)
if(colRanks[1] > colRanks[2]){
angel_wins = angel_wins+1
}
}
rbind(possible_ranks[row_order_fromshow[1,1]], possible_ranks[row_order_fromshow[1,2]], possible_ranks[row_order_fromshow[1,3]], possible_ranks[row_order_fromshow[1,4]]
]
row_order_fromshow[i,1]
row_order_fromshow[[i,1]]
possible_ranks[1]
angel_wins <- 0
for(i in 1:13542){
score_card = rbind(possible_ranks[[row_order_fromshow[i,1]]], possible_ranks[[row_order_fromshow[i,2]]], possible_ranks[[row_order_fromshow[i,3]]], possible_ranks[[row_order_fromshow[i,4]]])
colRanks <- colSums(score_card)
if(colRanks[1] > colRanks[2]){
angel_wins = angel_wins+1
}
}
6771/13541
''
6770/13541
6771/13541
6771*2
angel_wins_eye <- c(rep(F, 13542))
for(i in 1:13542){
score_card = rbind(possible_ranks[[row_order_fromshow[i,1]]], possible_ranks[[row_order_fromshow[i,2]]], possible_ranks[[row_order_fromshow[i,3]]], possible_ranks[[row_order_fromshow[i,4]]])
if(score_card[1,1] > score_card[1,2]){
angel_wins_eye[i] = T
}
}
angel_wins_eye
angel_last_panther <- c(rep(F, 13542))
for(i in 1:13542){
score_card = rbind(possible_ranks[[row_order_fromshow[i,1]]], possible_ranks[[row_order_fromshow[i,2]]], possible_ranks[[row_order_fromshow[i,3]]], possible_ranks[[row_order_fromshow[i,4]]])
if(score_card[2,1] ==1){
angel_last_panther[i] = T
}
}
row_order_from_show_exp1$eye
row_order_from_show_exp1$panther
row_order_from_show_exp1 <- row_order_fromshow
row_order_from_show_exp1$eye <- angel_wins_eye
row_order_from_show_exp1$panther <- angel_last_panther
View(row_order_from_show_exp1)
row_order_from_show_exp1 <- row_order_from_show_exp1[which(row_order_from_show_exp1$eye=T & row_order_from_show_exp1$panther=T)]
row_order_from_show_exp1 <- row_order_from_show_exp1[which(row_order_from_show_exp1$eye==T & row_order_from_show_exp1$panther==T)]
row_order_from_show_exp1 <- row_order_from_show_exp1[which(row_order_from_show_exp1$eye==T & row_order_from_show_exp1$panther==T),]
View(row_order_from_show_exp1)
angel_wins <- 0
for(i in 1:3030){
score_card = rbind(possible_ranks[[row_order_from_show_exp1[i,1]]], possible_ranks[[row_order_from_show_exp1[i,2]]], possible_ranks[[row_order_from_show_exp1[i,3]]], possible_ranks[[row_order_from_show_exp1[i,4]]])
colRanks <- colSums(score_card)
if(colRanks[1] > colRanks[2]){
angel_wins = angel_wins+1
}
}
1496/3030
1495/3030
View(score_card)
View(score_card)
row_order_from_show_exp2 <- row_order_from_show_exp2[which(row_order_from_show_exp2$mask==T),]
DJ_wins_mask <- c(rep(F, 3030))
for(i in 1:3030){
score_card = rbind(possible_ranks[[row_order_from_show_exp1[i,1]]], possible_ranks[[row_order_from_show_exp1[i,2]]], possible_ranks[[row_order_from_show_exp1[i,3]]], possible_ranks[[row_order_from_show_exp1[i,4]]])
if(score_card[4,1] < score_card[4,2]){
DJ_wins_mask[i] = T
}
}
row_order_from_show_exp2 <- row_order_from_show_exp1
row_order_from_show_exp2$mask <- DJ_wins_mask
row_order_from_show_exp2 <- row_order_from_show_exp2[which(row_order_from_show_exp2$mask==T),]
angel_wins <- 0
for(i in 1:1508){
score_card = rbind(possible_ranks[[row_order_from_show_exp2[i,1]]], possible_ranks[[row_order_from_show_exp2[i,2]]], possible_ranks[[row_order_from_show_exp2[i,3]]], possible_ranks[[row_order_from_show_exp2[i,4]]])
colRanks <- colSums(score_card)
if(colRanks[1] > colRanks[2]){
angel_wins = angel_wins+1
}
}
405/1508
View(score_card)
DJ_wins_mask <- c(rep(F, 3030))
for(i in 1:3030){
score_card = rbind(possible_ranks[[row_order_from_show_exp1[i,1]]], possible_ranks[[row_order_from_show_exp1[i,2]]], possible_ranks[[row_order_from_show_exp1[i,3]]], possible_ranks[[row_order_from_show_exp1[i,4]]])
if((score_card[4,1] < score_card[4,2]) & (score_card[4,1] >1)){
DJ_wins_mask[i] = T
}
}
row_order_from_show_exp2 <- row_order_from_show_exp1
row_order_from_show_exp2$mask <- DJ_wins_mask
row_order_from_show_exp2 <- row_order_from_show_exp2[which(row_order_from_show_exp2$mask==T),]
angel_wins <- 0
for(i in 1:1508){
score_card = rbind(possible_ranks[[row_order_from_show_exp2[i,1]]], possible_ranks[[row_order_from_show_exp2[i,2]]], possible_ranks[[row_order_from_show_exp2[i,3]]], possible_ranks[[row_order_from_show_exp2[i,4]]])
colRanks <- colSums(score_card)
if(colRanks[1] > colRanks[2]){
angel_wins = angel_wins+1
}
}
View(row_order_from_show_exp1)
DJ_wins_mask <- c(rep(F, 3030))
for(i in 1:3030){
score_card = rbind(possible_ranks[[row_order_from_show_exp1[i,1]]], possible_ranks[[row_order_from_show_exp1[i,2]]], possible_ranks[[row_order_from_show_exp1[i,3]]], possible_ranks[[row_order_from_show_exp1[i,4]]])
if((score_card[4,1] < score_card[4,2]) & (score_card[4,1] > 1)){
DJ_wins_mask[i] = T
}
}
row_order_from_show_exp2 <- row_order_from_show_exp1
row_order_from_show_exp2$mask <- DJ_wins_mask
row_order_from_show_exp2 <- row_order_from_show_exp2[which(row_order_from_show_exp2$mask==T),]
angel_wins <- 0
for(i in 1:1508){
score_card = rbind(possible_ranks[[row_order_from_show_exp2[i,1]]], possible_ranks[[row_order_from_show_exp2[i,2]]], possible_ranks[[row_order_from_show_exp2[i,3]]], possible_ranks[[row_order_from_show_exp2[i,4]]])
colRanks <- colSums(score_card)
if(colRanks[1] > colRanks[2]){
angel_wins = angel_wins+1
}
}
View(row_order_from_show_exp2)
angel_wins <- 0
for(i in 1:337){
score_card = rbind(possible_ranks[[row_order_from_show_exp2[i,1]]], possible_ranks[[row_order_from_show_exp2[i,2]]], possible_ranks[[row_order_from_show_exp2[i,3]]], possible_ranks[[row_order_from_show_exp2[i,4]]])
colRanks <- colSums(score_card)
if(colRanks[1] > colRanks[2]){
angel_wins = angel_wins+1
}
}
107/337
DJ_wins_mask <- c(rep(F, 3030))
for(i in 1:3030){
score_card = rbind(possible_ranks[[row_order_from_show_exp1[i,1]]], possible_ranks[[row_order_from_show_exp1[i,2]]], possible_ranks[[row_order_from_show_exp1[i,3]]], possible_ranks[[row_order_from_show_exp1[i,4]]])
if((score_card[4,1] < score_card[4,2]) & (score_card[4,1] > 2)){
DJ_wins_mask[i] = T
}
}
row_order_from_show_exp2 <- row_order_from_show_exp1
row_order_from_show_exp2$mask <- DJ_wins_mask
row_order_from_show_exp2 <- row_order_from_show_exp2[which(row_order_from_show_exp2$mask==T),]
angel_wins <- 0
for(i in 1:41){
score_card = rbind(possible_ranks[[row_order_from_show_exp2[i,1]]], possible_ranks[[row_order_from_show_exp2[i,2]]], possible_ranks[[row_order_from_show_exp2[i,3]]], possible_ranks[[row_order_from_show_exp2[i,4]]])
colRanks <- colSums(score_card)
if(colRanks[1] > colRanks[2]){
angel_wins = angel_wins+1
}
}
14/41
angel_wins_rat <- c(rep(F, 41))
for(i in 1:41){
score_card = rbind(possible_ranks[[row_order_from_show_exp2[i,1]]], possible_ranks[[row_order_from_show_exp2[i,2]]], possible_ranks[[row_order_from_show_exp2[i,3]]], possible_ranks[[row_order_from_show_exp1[i,4]]])
if(score_card[3,1] > score_card[3,2]){
angel_wins_rat[i] = T
}
}
row_order_from_show_exp3 <- row_order_from_show_exp2
row_order_from_show_exp3$mask <- angel_wins_rat
row_order_from_show_exp3 <- row_order_from_show_exp3[which(row_order_from_show_exp3$mask==T),]
angel_wins <- 0
for(i in 1:21){
score_card = rbind(possible_ranks[[row_order_from_show_exp3[i,1]]], possible_ranks[[row_order_from_show_exp3[i,2]]], possible_ranks[[row_order_from_show_exp3[i,3]]], possible_ranks[[row_order_from_show_exp3[i,4]]])
colRanks <- colSums(score_card)
if(colRanks[1] > colRanks[2]){
angel_wins = angel_wins+1
}
}
14/21
ties <- 0
for(i in 1:21){
score_card = rbind(possible_ranks[[row_order_from_show_exp3[i,1]]], possible_ranks[[row_order_from_show_exp3[i,2]]], possible_ranks[[row_order_from_show_exp3[i,3]]], possible_ranks[[row_order_from_show_exp3[i,4]]])
colRanks <- colSums(score_card)
if(colRanks[1] == colRanks[2]){
ties = ties+1
}
}
setwd("/Users/maria/Desktop/Schelling_ML")
train_inputs = read_csv('train_inputs_hap_0.csv')
train_inputs = read.csv('train_inputs_hap_0.csv')
View(train_inputs)
train_outputs = read.csv('train_outputs_hap_0.csv')
setwd("/Users/maria/Desktop/Schelling_ML")
train_inputs = read.csv('train_inputs_hap_0.csv')
train_outputs = read.csv('train_outputs_hap_0.csv')
for(i in c(2,100)){
filepath_in = paste('train_inputs_hap_', i, +'.csv')
filepath_out = paste('train_outputs_hap_', i, +'.csv')
file_in = read.csv(filepath_in)
file_out = read.csv(filepath_out)
train_inputs = as.data.frame(rbind(train_inputs, file_in))
train_outputs = as.data.frame(rbind(train_outputs, file_out)
print(i)
}
setwd("/Users/maria/Desktop/Schelling_ML")
train_inputs = read.csv('train_inputs_hap_0.csv')
train_outputs = read.csv('train_outputs_hap_0.csv')
for(i in 2:100){
filepath_in = paste('train_inputs_hap_', i, +'.csv')
filepath_out = paste('train_outputs_hap_', i, +'.csv')
file_in = read.csv(filepath_in)
file_out = read.csv(filepath_out)
train_inputs = as.data.frame(rbind(train_inputs, file_in))
train_outputs = as.data.frame(rbind(train_outputs, file_out)
print(i)
}
setwd("/Users/maria/Desktop/Schelling_ML")
train_inputs = read.csv('train_inputs_hap_0.csv')
train_outputs = read.csv('train_outputs_hap_0.csv')
for(i in 2:100){
filepath_in = paste('train_inputs_hap_', i, +'.csv')
filepath_out = paste('train_outputs_hap_', i, +'.csv')
file_in = read.csv(filepath_in)
file_out = read.csv(filepath_out)
train_inputs = as.data.frame(rbind(train_inputs, file_in))
train_outputs = as.data.frame(rbind(train_outputs, file_out))
print(i)
}
setwd("/Users/maria/Desktop/Schelling_ML")
train_inputs = read.csv('train_inputs_hap_0.csv')
train_outputs = read.csv('train_outputs_hap_0.csv')
for(i in 2:100){
filepath_in = paste('train_inputs_hap_', i, '.csv')
filepath_out = paste('train_outputs_hap_', i, '.csv')
file_in = read.csv(filepath_in)
file_out = read.csv(filepath_out)
train_inputs = as.data.frame(rbind(train_inputs, file_in))
train_outputs = as.data.frame(rbind(train_outputs, file_out))
print(i)
}
setwd("/Users/maria/Desktop/Schelling_ML")
train_inputs = read.csv('train_inputs_hap_0.csv')
train_outputs = read.csv('train_outputs_hap_0.csv')
for(i in 2:100){
filepath_in = paste('train_inputs_hap_', i, '.csv', sep="")
filepath_out = paste('train_outputs_hap_', i, '.csv', sep="")
file_in = read.csv(filepath_in)
file_out = read.csv(filepath_out)
train_inputs = as.data.frame(rbind(train_inputs, file_in))
train_outputs = as.data.frame(rbind(train_outputs, file_out))
print(i)
}
View(train_inputs)
library(reshape2)
library(ggplot2)
